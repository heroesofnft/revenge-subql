/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ExpeditionInterface extends utils.Interface {
  functions: {
    "CAMPAIGN_DURATION()": FunctionFragment;
    "WINDOW_DURATION()": FunctionFragment;
    "boostAmountBp()": FunctionFragment;
    "campaigns(uint256)": FunctionFragment;
    "changeRewards(uint256[],uint256[])": FunctionFragment;
    "createAndParticipateCampaign(uint256,uint256[])": FunctionFragment;
    "currentCampaigns()": FunctionFragment;
    "emergencyWithdrawNFT(uint256)": FunctionFragment;
    "finishCampaign(uint256)": FunctionFragment;
    "getAttackNFTs(uint256)": FunctionFragment;
    "getDefenseNFTs(uint256)": FunctionFragment;
    "getFirstActiveCampaignId()": FunctionFragment;
    "getNFTAttack(uint256)": FunctionFragment;
    "getNFTDefense(uint256)": FunctionFragment;
    "getNFTEndurance(uint256)": FunctionFragment;
    "getNFTLevel(uint256)": FunctionFragment;
    "honReward(uint256)": FunctionFragment;
    "honToken()": FunctionFragment;
    "hrmReward(uint256)": FunctionFragment;
    "hrmToken()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "joinedCampaigns(address,uint256)": FunctionFragment;
    "maxCampaignCards()": FunctionFragment;
    "nft()": FunctionFragment;
    "owner()": FunctionFragment;
    "participate(uint256,uint256[])": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "penaltyAmountBp()": FunctionFragment;
    "reinforceAttack(uint256,uint256)": FunctionFragment;
    "reinforceDefense(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setBoostAmountBp(uint256)": FunctionFragment;
    "setPenaltyAmountBp(uint256)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "totalCampaigns()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockAttackNFTs(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CAMPAIGN_DURATION"
      | "WINDOW_DURATION"
      | "boostAmountBp"
      | "campaigns"
      | "changeRewards"
      | "createAndParticipateCampaign"
      | "currentCampaigns"
      | "emergencyWithdrawNFT"
      | "finishCampaign"
      | "getAttackNFTs"
      | "getDefenseNFTs"
      | "getFirstActiveCampaignId"
      | "getNFTAttack"
      | "getNFTDefense"
      | "getNFTEndurance"
      | "getNFTLevel"
      | "honReward"
      | "honToken"
      | "hrmReward"
      | "hrmToken"
      | "initialize"
      | "joinedCampaigns"
      | "maxCampaignCards"
      | "nft"
      | "owner"
      | "participate"
      | "pause"
      | "paused"
      | "penaltyAmountBp"
      | "reinforceAttack"
      | "reinforceDefense"
      | "renounceOwnership"
      | "rewardMultiplier"
      | "setBoostAmountBp"
      | "setPenaltyAmountBp"
      | "setRewardMultiplier"
      | "totalCampaigns"
      | "transferOwnership"
      | "unlockAttackNFTs"
      | "unpause"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CAMPAIGN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WINDOW_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boostAmountBp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewards",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndParticipateCampaign",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishCampaign",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttackNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefenseNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstActiveCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTAttack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTDefense",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTEndurance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "honReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "honToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hrmReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hrmToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedCampaigns",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCampaignCards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyAmountBp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinforceAttack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reinforceDefense",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoostAmountBp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyAmountBp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAttackNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CAMPAIGN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WINDOW_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostAmountBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndParticipateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttackNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefenseNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstActiveCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTDefense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTEndurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "honReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "honToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hrmReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hrmToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinedCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCampaignCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyAmountBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinforceAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinforceDefense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoostAmountBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyAmountBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAttackNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "FinishCampaign(address,address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Participate(address,uint256,bool,uint256,uint256[])": EventFragment;
    "Paused(address)": EventFragment;
    "ReinforceAttack(address,uint256,uint256,uint256)": EventFragment;
    "ReinforceDefense(address,uint256,uint256,uint256)": EventFragment;
    "UnlockAttackNFTs(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FinishCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Participate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReinforceAttack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReinforceDefense"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockAttackNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FinishCampaignEventObject {
  _sender: string;
  _winner: string;
  _loser: string;
  _honReward: BigNumber;
  _hrmReward: BigNumber;
  _id: BigNumber;
}
export type FinishCampaignEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  FinishCampaignEventObject
>;

export type FinishCampaignEventFilter = TypedEventFilter<FinishCampaignEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParticipateEventObject {
  _sender: string;
  _id: BigNumber;
  _isMaker: boolean;
  _points: BigNumber;
  _tokenIds: BigNumber[];
}
export type ParticipateEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber, BigNumber[]],
  ParticipateEventObject
>;

export type ParticipateEventFilter = TypedEventFilter<ParticipateEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReinforceAttackEventObject {
  _sender: string;
  _id: BigNumber;
  _tokenId: BigNumber;
  _points: BigNumber;
}
export type ReinforceAttackEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ReinforceAttackEventObject
>;

export type ReinforceAttackEventFilter = TypedEventFilter<ReinforceAttackEvent>;

export interface ReinforceDefenseEventObject {
  _sender: string;
  _id: BigNumber;
  _tokenId: BigNumber;
  _points: BigNumber;
}
export type ReinforceDefenseEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ReinforceDefenseEventObject
>;

export type ReinforceDefenseEventFilter =
  TypedEventFilter<ReinforceDefenseEvent>;

export interface UnlockAttackNFTsEventObject {
  _sender: string;
  _id: BigNumber;
}
export type UnlockAttackNFTsEvent = TypedEvent<
  [string, BigNumber],
  UnlockAttackNFTsEventObject
>;

export type UnlockAttackNFTsEventFilter =
  TypedEventFilter<UnlockAttackNFTsEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Expedition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExpeditionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WINDOW_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostAmountBp(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTimestamp: BigNumber;
        tier: BigNumber;
        maker: string;
        ambusher: string;
        area: BigNumber;
        defensePoint: BigNumber;
        attackPoint: BigNumber;
      }
    >;

    changeRewards(
      _honReward: PromiseOrValue<BigNumberish>[],
      _hrmReward: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAndParticipateCampaign(
      _tier: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentCampaigns(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdrawNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishCampaign(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDefenseNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFirstActiveCampaignId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNFTAttack(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTDefense(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTEndurance(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTLevel(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    honReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    honToken(overrides?: CallOverrides): Promise<[string]>;

    hrmReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hrmToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _honToken: PromiseOrValue<string>,
      _hrmToken: PromiseOrValue<string>,
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinedCampaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxCampaignCards(overrides?: CallOverrides): Promise<[BigNumber]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participate(
      _id: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    penaltyAmountBp(overrides?: CallOverrides): Promise<[BigNumber]>;

    reinforceAttack(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinforceDefense(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBoostAmountBp(
      _boostAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPenaltyAmountBp(
      _penaltyAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCampaigns(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  boostAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

  campaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
      startTimestamp: BigNumber;
      tier: BigNumber;
      maker: string;
      ambusher: string;
      area: BigNumber;
      defensePoint: BigNumber;
      attackPoint: BigNumber;
    }
  >;

  changeRewards(
    _honReward: PromiseOrValue<BigNumberish>[],
    _hrmReward: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAndParticipateCampaign(
    _tier: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdrawNFT(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishCampaign(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttackNFTs(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDefenseNFTs(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFirstActiveCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

  getNFTAttack(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTDefense(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTEndurance(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTLevel(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  honReward(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  honToken(overrides?: CallOverrides): Promise<string>;

  hrmReward(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hrmToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    _honToken: PromiseOrValue<string>,
    _hrmToken: PromiseOrValue<string>,
    _nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinedCampaigns(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxCampaignCards(overrides?: CallOverrides): Promise<BigNumber>;

  nft(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  participate(
    _id: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  penaltyAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

  reinforceAttack(
    _id: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinforceDefense(
    _id: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  setBoostAmountBp(
    _boostAmountBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPenaltyAmountBp(
    _penaltyAmountBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    _rewardMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockAttackNFTs(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    boostAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTimestamp: BigNumber;
        tier: BigNumber;
        maker: string;
        ambusher: string;
        area: BigNumber;
        defensePoint: BigNumber;
        attackPoint: BigNumber;
      }
    >;

    changeRewards(
      _honReward: PromiseOrValue<BigNumberish>[],
      _hrmReward: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAndParticipateCampaign(
      _tier: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishCampaign(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDefenseNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFirstActiveCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTAttack(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTDefense(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTEndurance(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTLevel(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    honReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    honToken(overrides?: CallOverrides): Promise<string>;

    hrmReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hrmToken(overrides?: CallOverrides): Promise<string>;

    initialize(
      _honToken: PromiseOrValue<string>,
      _hrmToken: PromiseOrValue<string>,
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    joinedCampaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCampaignCards(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    participate(
      _id: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    penaltyAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

    reinforceAttack(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reinforceDefense(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setBoostAmountBp(
      _boostAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyAmountBp(
      _penaltyAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      _rewardMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FinishCampaign(address,address,address,uint256,uint256,uint256)"(
      _sender?: null,
      _winner?: null,
      _loser?: null,
      _honReward?: null,
      _hrmReward?: null,
      _id?: null
    ): FinishCampaignEventFilter;
    FinishCampaign(
      _sender?: null,
      _winner?: null,
      _loser?: null,
      _honReward?: null,
      _hrmReward?: null,
      _id?: null
    ): FinishCampaignEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Participate(address,uint256,bool,uint256,uint256[])"(
      _sender?: null,
      _id?: null,
      _isMaker?: null,
      _points?: null,
      _tokenIds?: null
    ): ParticipateEventFilter;
    Participate(
      _sender?: null,
      _id?: null,
      _isMaker?: null,
      _points?: null,
      _tokenIds?: null
    ): ParticipateEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReinforceAttack(address,uint256,uint256,uint256)"(
      _sender?: null,
      _id?: null,
      _tokenId?: null,
      _points?: null
    ): ReinforceAttackEventFilter;
    ReinforceAttack(
      _sender?: null,
      _id?: null,
      _tokenId?: null,
      _points?: null
    ): ReinforceAttackEventFilter;

    "ReinforceDefense(address,uint256,uint256,uint256)"(
      _sender?: null,
      _id?: null,
      _tokenId?: null,
      _points?: null
    ): ReinforceDefenseEventFilter;
    ReinforceDefense(
      _sender?: null,
      _id?: null,
      _tokenId?: null,
      _points?: null
    ): ReinforceDefenseEventFilter;

    "UnlockAttackNFTs(address,uint256)"(
      _sender?: null,
      _id?: null
    ): UnlockAttackNFTsEventFilter;
    UnlockAttackNFTs(_sender?: null, _id?: null): UnlockAttackNFTsEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    WINDOW_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    boostAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeRewards(
      _honReward: PromiseOrValue<BigNumberish>[],
      _hrmReward: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAndParticipateCampaign(
      _tier: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishCampaign(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefenseNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstActiveCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTAttack(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTDefense(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTEndurance(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTLevel(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    honReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    honToken(overrides?: CallOverrides): Promise<BigNumber>;

    hrmReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hrmToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _honToken: PromiseOrValue<string>,
      _hrmToken: PromiseOrValue<string>,
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinedCampaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCampaignCards(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      _id: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyAmountBp(overrides?: CallOverrides): Promise<BigNumber>;

    reinforceAttack(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinforceDefense(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setBoostAmountBp(
      _boostAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPenaltyAmountBp(
      _penaltyAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAMPAIGN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WINDOW_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostAmountBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeRewards(
      _honReward: PromiseOrValue<BigNumberish>[],
      _hrmReward: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAndParticipateCampaign(
      _tier: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishCampaign(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefenseNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstActiveCampaignId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTAttack(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTDefense(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTEndurance(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTLevel(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    honReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    honToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hrmReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hrmToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _honToken: PromiseOrValue<string>,
      _hrmToken: PromiseOrValue<string>,
      _nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinedCampaigns(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCampaignCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participate(
      _id: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyAmountBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinforceAttack(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinforceDefense(
      _id: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBoostAmountBp(
      _boostAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyAmountBp(
      _penaltyAmountBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockAttackNFTs(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
